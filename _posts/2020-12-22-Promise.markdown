---
layout: post
title:  "JS-비동기(2) : Promise란?"
date:   2020-12-22 10:30:00 +0300
image:  06.jpg
tags:   javascript
---


## 시작하는 말

Promise 포스팅을 간단히 읽기 전에 [JS-비동기(1) : 비동기와 동기]() 포스팅을 참고하자.


***



## Promise란?

Promise는 자바스크립트 비동기 처리에 사용되는 객체로 주로 서버에서 받아온 데이터를 화면에 표시할 때 사용한다. 일반적으로 웹 애플리케이션을 구현할 때 서버에서 데이터를 요청하고 받아오기 위해 API를 사용합니다. 이때 데이터를 아직 받아오지 못했는데 화면에 데이터를 표시하려고 할때 발생하는 오류를 해결하기 위한 방법 중 하나이다.



### Promise 사용법

~~~javascript
function getSomeData(){
    return new Promise(function(resolve, reject){   //데이터를 받으면 resolve 호출 / 실패 시 reject
        resolve(result);                            //가져온 데이터 : result
    }); 
}

getSomeData().then(function(resultData){            //resolve의 결과값이 resultData로 전달
    console.log(resultData);
});
~~~

쉽게 new Promise()로 생성, resolve()는 결과값, then()은 Promise 실행이 완료된 후 실행을 의미한다



### Promise's states

* 대기(Pending)
* 이행(Fulfilled)
* 실패(Rejected)


Promise의 상태 중 대기(Pending)는 new Promise()까지 했을때이다.


Promise의 상태 중 이행(Fulfilled)은 resolve();까지하여 결과를 받았을 때라고 생각한다. 이행 상태가 되면 then() 처리로 결과값을 사용 가능하다.


Promise의 상태 중 실패(Rejected)는 reject()를 사용하여 실패 상태로 만들었을 때이다.




### Promise 에러 처리



Promise의 에러를 처리하는 방법은 then()을 두 번쓰거나 catch()를 이용하여 reject() 메서드가 호출되어 실패 상태가 된 경우입니다. 가급적 catch를 사용해야 한다. 이유는 then으로 처리하려면 콜백 함수 내부에서 나는 오류를 잡아낼 수 없기 떄문이다.

~~~javascript
getSomeData().then(function(resultData){
    console.log(resultData);
}).catch(function(err){
    console.log('error : ', err);
});
~~~


***

#### 오늘 성장에 도움을 주신 개발자분

[출처](https://joshua1988.github.io/web-development/javascript/promise-for-beginners/) https://joshua1988.github.io/web-development/javascript/promise-for-beginners/

감사합니다.